#!/usr/bin/env node

/**
 * Admin User Initialization Script
 * 
 * This script checks if an admin user exists and creates one if it doesn't.
 * It can be run independently or as part of the application startup.
 * 
 * Usage:
 * - node scripts/init-admin.js
 * - npm run init-admin (if added to package.json scripts)
 */

require('dotenv').config();
const { sequelize } = require('../config/db');
const User = require('../models/User.model');
const constants = require('../config/constants');

const initializeAdminUser = async () => {
  try {
    console.log('üîÑ Connecting to database...');
    await sequelize.authenticate();
    console.log('‚úÖ Database connection established');
    
    console.log('üîÑ Checking for admin user...');
    
    // Check if admin user already exists
    const existingAdmin = await User.findOne({
      where: {
        role: constants.USER_ROLES.SUPER_ADMIN,
        isDeleted: false
      }
    });
    
    if (existingAdmin) {
      console.log('‚úÖ Admin user already exists');
      console.log(`üìß Admin Email: ${existingAdmin.email}`);
      console.log(`üë§ Admin Name: ${existingAdmin.name}`);
      console.log(`üìÖ Created: ${existingAdmin.createdAt}`);
      return existingAdmin;
    }
    
    // Create admin user if it doesn't exist
    const adminEmail = process.env.ADMIN_EMAIL || 'admin@gmail.com';
    const adminPassword = process.env.ADMIN_PASSWORD || 'Admin@123';
    const adminName = process.env.ADMIN_NAME || 'Super Admin';
    
    console.log('üîÑ Creating admin user...');
    
    const adminUser = await User.create({
      email: adminEmail,
      name: adminName,
      password: adminPassword,
      role: constants.USER_ROLES.SUPER_ADMIN,
      emailVerified: true,
      isDeleted: false
    });
    
    console.log('‚úÖ Admin user created successfully!');
    console.log('üìã Admin User Details:');
    console.log(`   üìß Email: ${adminEmail}`);
    console.log(`   üîë Password: ${adminPassword}`);
    console.log(`   üë§ Name: ${adminName}`);
    console.log(`   üÜî User ID: ${adminUser.id}`);
    console.log(`   üè∑Ô∏è  Role: ${adminUser.role}`);
    console.log(`   üìÖ Created: ${adminUser.createdAt}`);
    console.log('');
    console.log('‚ö†Ô∏è  IMPORTANT: Please change the admin password after first login!');
    console.log('üîê You can change the password through the admin dashboard or API.');
    
    return adminUser;
    
  } catch (error) {
    console.error('‚ùå Error creating admin user:', error.message);
    console.error('Stack trace:', error.stack);
    throw error;
  } finally {
    // Close database connection
    await sequelize.close();
    console.log('üîå Database connection closed');
  }
};

// Run the script if called directly
if (require.main === module) {
  initializeAdminUser()
    .then(() => {
      console.log('‚úÖ Admin initialization completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Admin initialization failed:', error.message);
      process.exit(1);
    });
}

module.exports = { initializeAdminUser };
